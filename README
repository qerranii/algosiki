# Алгоритмическая задача: Оптимизированный путь с условием

## Условие задачи

Дан неориентированный взвешенный граф с **N** вершинами и **M** рёбрами. Требуется:
1. Найти кратчайшие расстояния от стартовой вершины **S** до всех остальных (алгоритм Дейкстры)
2. Отсортировать полученные расстояния по возрастанию
3. Используя бинарный поиск, найти индекс первого элемента в отсортированном массиве, который больше или равен среднему значению всех расстояний

### Формат входных данных
Первая строка содержит:
- `N` (2 ≤ N ≤ 10<sup>5</sup>) — количество вершин
- `S` (0 ≤ S < N) — стартовая вершина

Последующие **M** строк содержат:
- `u v w` — ребро между вершинами u и v с весом w (0 ≤ w ≤ 10<sup>4</sup>)

### Формат выходных данных
Одно целое число:
- Индекс первого элемента ≥ среднего значения
- **-1**, если такого элемента нет

## Ограничения

**Время выполнения:** 2 секунда на тест
**Память:** 256 MB
**Запрещенные модули:** `heapq`, `numpy`, `scipy`, `networkx`
**Максимальный размер входных данных:** 10 MB

## Пример

**Ввод:**


При большом желание можно добавить антиплагиат, но я ряльно не разобрался как это делать нормально.

python main.py {user_code} - проверка тестов
rm -rg tests/ answers/ - удалить все тесты и ответы
